{"version":3,"sources":["scripts/main.js"],"names":["cells","Array","from","document","getElementsByClassName","buttonStart","querySelector","buttonRestart","messageStart","messageWin","messageLose","gameScore","getRandomIndex","Math","floor","random","length","getRandomNumber","setStyles","cell","textContent","styleClass","i","classList","remove","add","getScore","reduce","acc","num","start","randomIndex1","randomIndex2","restart","setRandomEmptyCell","arrWithEmptyCell","push","setupInputOnce","addEventListener","handleInput","once","e","key","move","rows","cols","cellsGroupedByRow","row","j","index","cellsGroupedByReversedRow","map","reverse","cellsGroupedByColumn","cellsGroupedByReversedColumn","column","direction","moved","groupedCells","slideTiles","resetMergedFlags","merged","forEach","group","slideTilesInGroup","canMove","cellWithTile","neighborTile","targetCell","currentCell","neighbors","getNeighbors","neighbor","indexOf","canGoLeft","canGoUp","canGoRight","rowLength","canGoDown"],"mappings":"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","file":"main.747da972.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst cells = Array.from(document.getElementsByClassName('field_cell'));\nconst buttonStart = document.querySelector('.start');\nconst buttonRestart = document.querySelector('.restart');\nconst messageStart = document.querySelector('.message_start');\nconst messageWin = document.querySelector('.message_win');\nconst messageLose = document.querySelector('.message_lose');\nconst gameScore = document.querySelector('.game_score');\n\nfunction getRandomIndex() {\n  return Math.floor(Math.random() * cells.length);\n}\n\nfunction getRandomNumber() {\n  return Math.random() > 0.1 ? 2 : 4;\n}\n\nfunction setStyles() {\n  for (const cell of cells) {\n    const textContent = cell.textContent;\n    const styleClass = `field_cell--${textContent}`;\n\n    for (let i = 1; i <= 2048; i *= 2) {\n      cell.classList.remove(`field_cell--${i}`);\n    }\n\n    if (textContent) {\n      cell.classList.add(styleClass);\n    }\n  }\n}\n\nfunction getScore() {\n  gameScore.textContent = cells.reduce((acc, num) => acc + +num.textContent, 0);\n\n  for (let i = 0; i < cells.length; i++) {\n    if (cells[i].textContent >= 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n}\n\nfunction start() {\n  const randomIndex1 = getRandomIndex();\n  let randomIndex2 = getRandomIndex();\n\n  while (randomIndex1 === randomIndex2) {\n    randomIndex2 = getRandomIndex();\n  }\n\n  cells[randomIndex1].textContent = getRandomNumber();\n  cells[randomIndex2].textContent = getRandomNumber();\n\n  setStyles();\n  buttonStart.classList.add('hidden');\n  buttonRestart.classList.remove('hidden');\n  messageStart.classList.add('hidden');\n\n  getScore();\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n}\n\nfunction restart() {\n  for (const cell of cells) {\n    cell.classList.remove(`field_cell--${cell.textContent}`);\n    cell.textContent = '';\n  }\n\n  start();\n}\n\nfunction setRandomEmptyCell() {\n  const arrWithEmptyCell = [];\n\n  for (const cell of cells) {\n    if (!cell.textContent) {\n      arrWithEmptyCell.push(cell);\n    }\n  }\n\n  if (!arrWithEmptyCell.length) {\n    return;\n  }\n\n  const randomIndex = Math.floor(Math.random() * arrWithEmptyCell.length);\n\n  arrWithEmptyCell[randomIndex].textContent = getRandomNumber();\n  setStyles();\n}\n\nbuttonStart.addEventListener('click', start);\nbuttonRestart.addEventListener('click', restart);\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  document.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      move('up');\n      break;\n    case 'ArrowDown':\n      move('down');\n      break;\n    case 'ArrowLeft':\n      move('left');\n      break;\n    case 'ArrowRight':\n      move('right');\n      break;\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  setupInputOnce();\n};\n\nconst rows = 4;\nconst cols = 4;\n\nconst cellsGroupedByRow = [];\n\nfor (let i = 0; i < rows; i++) {\n  const row = [];\n\n  for (let j = 0; j < cols; j++) {\n    const index = i * cols + j;\n\n    row.push(cells[index]);\n  }\n  cellsGroupedByRow.push(row);\n}\n\nconst cellsGroupedByReversedRow = cellsGroupedByRow.map(\n  row => [...row].reverse());\n\nconst cellsGroupedByColumn = [];\n\nfor (let i = 0; i < cols; i++) {\n  const row = [];\n\n  for (let j = 0; j < rows; j++) {\n    const index = j * cols + i;\n\n    row.push(cells[index]);\n  }\n  cellsGroupedByColumn.push(row);\n}\n\nconst cellsGroupedByReversedColumn = cellsGroupedByColumn.map(\n  column => [...column].reverse());\n\nfunction move(direction) {\n  let moved = false;\n  let groupedCells;\n\n  switch (direction) {\n    case 'up':\n      groupedCells = cellsGroupedByColumn;\n      break;\n    case 'down':\n      groupedCells = cellsGroupedByReversedColumn;\n      break;\n    case 'left':\n      groupedCells = cellsGroupedByRow;\n      break;\n    case 'right':\n      groupedCells = cellsGroupedByReversedRow;\n      break;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    if (slideTiles(groupedCells)) {\n      moved = true;\n    }\n  }\n\n  if (moved) {\n    setRandomEmptyCell();\n  }\n\n  getScore();\n  setStyles();\n  resetMergedFlags();\n}\n\nfunction resetMergedFlags() {\n  for (const cell of cells) {\n    cell.merged = false;\n  }\n}\n\nfunction slideTiles(groupedCells) {\n  let moved = false;\n\n  groupedCells.forEach(group => {\n    if (slideTilesInGroup(group)) {\n      moved = true;\n    }\n  });\n\n  return moved;\n}\n\nfunction slideTilesInGroup(group) {\n  if (!canMove()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  let moved = false;\n\n  for (let i = 1; i < group.length; i++) {\n    if (!group[i].textContent) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n    const neighborTile = group[i - 1];\n\n    if (cellWithTile.textContent && neighborTile.textContent\n      && cellWithTile.textContent !== neighborTile.textContent) {\n      continue;\n    }\n\n    for (let j = i - 1; j >= 0; j--) {\n      const targetCell = group[j];\n\n      if (!targetCell) {\n        continue;\n      }\n\n      const { textContent, merged } = targetCell;\n\n      if (!textContent) {\n        targetCell.textContent = cellWithTile.textContent;\n        cellWithTile.textContent = '';\n        moved = true;\n      } else if (textContent === cellWithTile.textContent\n          && !cellWithTile.merged && !merged) {\n        targetCell.textContent = +textContent\n        + (+cellWithTile.textContent);\n        cellWithTile.textContent = '';\n        cellWithTile.merged = true;\n        targetCell.merged = true;\n        moved = true;\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction canMove() {\n  for (let i = 0; i < cells.length; i++) {\n    if (!cells[i].textContent) {\n      return true;\n    }\n  }\n\n  for (let i = 0; i < cells.length; i++) {\n    const currentCell = cells[i];\n    const neighbors = getNeighbors(currentCell);\n\n    for (const neighbor of neighbors) {\n      if (neighbor.textContent === currentCell.textContent) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getNeighbors(cell) {\n  const neighbors = [];\n  const index = cells.indexOf(cell);\n  const rowLength = 4;\n\n  const canGoLeft = index % rowLength !== 0;\n  const canGoUp = index >= rowLength;\n  const canGoRight = index % rowLength !== rowLength - 1;\n  const canGoDown = index < cells.length - rowLength;\n\n  if (canGoLeft) {\n    neighbors.push(cells[index - 1]);\n  }\n\n  if (canGoUp) {\n    neighbors.push(cells[index - rowLength]);\n  }\n\n  if (canGoRight) {\n    neighbors.push(cells[index + 1]);\n  }\n\n  if (canGoDown) {\n    neighbors.push(cells[index + rowLength]);\n  }\n\n  return neighbors;\n}\n"]}